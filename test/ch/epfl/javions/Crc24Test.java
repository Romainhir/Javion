package ch.epfl.javions;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Crc24Test {
    @Test
    void bitwiseTest(){
        assertEquals(0x035DB8, Crc24.crc_bitwise(0xFFF409, new byte[]{(byte) 0x8D, 0x39, 0x2A, (byte) 0xE4,
                (byte) 0x99, 0x10, 0x7F, (byte) 0xB5, (byte) 0xC0, 0x04, 0x39}));

        assertEquals(0, Crc24.crc_bitwise(0xFFF409, new byte[]{(byte) 0x8D, 0x39, 0x2A, (byte) 0xE4,
                (byte) 0x99, 0x10, 0x7F, (byte) 0xB5, (byte) 0xC0, 0x04, 0x39, 0x03, 0x5D, (byte) 0xB8}));

        assertEquals(0xEE2EC6, Crc24.crc_bitwise(Crc24.GENERATOR, new byte[]{(byte) 0x8D, 0x4D, 0x22,
                (byte) 0x86, (byte) 0xEA, 0x42, (byte) 0x88, 0x67, 0x29, 0x1C, 0x08}));
    }

    @Test
    void crcTest(){
        assertEquals(0x035DB8, Crc24.crc(0xFFF409, new byte[]{(byte) 0x8D, 0x39, 0x2A, (byte) 0xE4,
                (byte) 0x99, 0x10, 0x7F, (byte) 0xB5, (byte) 0xC0, 0x04, 0x39}));

        assertEquals(0, Crc24.crc(0xFFF409, new byte[]{(byte) 0x8D, 0x39, 0x2A, (byte) 0xE4,
                (byte) 0x99, 0x10, 0x7F, (byte) 0xB5, (byte) 0xC0, 0x04, 0x39, 0x03, 0x5D, (byte) 0xB8}));
        assertEquals(0xEE2EC6, Crc24.crc(Crc24.GENERATOR, new byte[]{(byte) 0x8D, 0x4D, 0x22,
                (byte) 0x86, (byte) 0xEA, 0x42, (byte) 0x88, 0x67, 0x29, 0x1C, 0x08}));
    }
}
